mutate(expected_votes = (.pred_0 * 0) + (.pred_1 * 1) + (.pred_2 * 2) + (.pred_3 * 3))
predict(ranger_final_model, new_data = new_data, type = "prob") %>%
bind_cols(new_data) %>%
select(match_id, player_id, player_name, player_team, .pred_0:.pred_3) %>%
mutate(expected_votes = (.pred_0 * 0) + (.pred_1 * 1) + (.pred_2 * 2) + (.pred_3 * 3)) %>%
group_by(match_id) %>%
slice_max(order_by = expected_votes, n = 3, with_ties = FALSE)
predict(ranger_final_model, new_data = new_data, type = "prob") %>%
bind_cols(new_data) %>%
select(match_id, player_id, player_name, player_team, .pred_0:.pred_3) %>%
mutate(expected_votes = (.pred_0 * 0) + (.pred_1 * 1) + (.pred_2 * 2) + (.pred_3 * 3)) %>%
group_by(match_id) %>%
slice_max(order_by = expected_votes, n = 3, with_ties = FALSE) %>%
ungroup() %>%
arrange(match_id, desc(expected_votes)) %>%
mutate(predicted_votes = rep(c(3, 2, 1), n_rows))
predict(ranger_final_model, new_data = new_data, type = "prob") %>%
bind_cols(new_data) %>%
select(match_id, player_id, player_name, player_team, .pred_0:.pred_3) %>%
mutate(expected_votes = (.pred_0 * 0) + (.pred_1 * 1) + (.pred_2 * 2) + (.pred_3 * 3)) %>%
group_by(match_id) %>%
slice_max(order_by = expected_votes, n = 3, with_ties = FALSE) %>%
ungroup() %>%
arrange(match_id, desc(expected_votes))
n_rows <- 594
results <-
predict(ranger_final_model, new_data = new_data, type = "prob") %>%
bind_cols(new_data) %>%
select(match_id, player_id, player_name, player_team, .pred_0:.pred_3) %>%
mutate(expected_votes = (.pred_0 * 0) + (.pred_1 * 1) + (.pred_2 * 2) + (.pred_3 * 3)) %>%
group_by(match_id) %>%
slice_max(order_by = expected_votes, n = 3, with_ties = FALSE) %>%
ungroup() %>%
arrange(match_id, desc(expected_votes)) %>%
mutate(predicted_votes = rep(c(3, 2, 1), n_rows))
predict(ranger_final_model, new_data = new_data, type = "prob") %>%
bind_cols(new_data) %>%
select(match_id, player_id, player_name, player_team, .pred_0:.pred_3) %>%
mutate(expected_votes = (.pred_0 * 0) + (.pred_1 * 1) + (.pred_2 * 2) + (.pred_3 * 3)) %>%
group_by(match_id) %>%
slice_max(order_by = expected_votes, n = 3, with_ties = FALSE) %>%
ungroup() %>%
arrange(match_id, desc(expected_votes))
594/3
n_rows <- 198
results <-
predict(ranger_final_model, new_data = new_data, type = "prob") %>%
bind_cols(new_data) %>%
select(match_id, player_id, player_name, player_team, .pred_0:.pred_3) %>%
mutate(expected_votes = (.pred_0 * 0) + (.pred_1 * 1) + (.pred_2 * 2) + (.pred_3 * 3)) %>%
group_by(match_id) %>%
slice_max(order_by = expected_votes, n = 3, with_ties = FALSE) %>%
ungroup() %>%
arrange(match_id, desc(expected_votes)) %>%
mutate(predicted_votes = rep(c(3, 2, 1), n_rows))
results
results %>%
group_by(player_id, player_name)%>%
summarize(total = sum(predicted_votes))
results %>%
group_by(player_id, player_name)%>%
summarize(total = sum(predicted_votes)) %>%
arrange(desc(total))
# Create a model specification
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("classification") %>%
set_engine("ranger")
# Create a work flow
ranger_workflow <-
workflow() %>%
add_recipe(first_ranger_recipe) %>%
add_model(ranger_spec)
# Check the accuracy on the bootstrap samples to tune hyper parameters
set.seed(567)
# Create a work flow
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
# Set up a grid for the tuning process
rf_grid <- grid_regular(
# The number of predictors that will be randomly sampled at
# each split when creating the tree models.
mtry(range = c(5, 31)),
# The minimum number of data points in a node that are
# required for the node to be split further
min_n(range = c(3, 7)),
levels = 10
)
# Check the accuracy on the bootstrap samples to tune hyper parameters
set.seed(567)
ranger_tune <-
tune_grid(ranger_workflow,
# pass the bootstrap folds
resamples = bootstrap_folds,
# specify the metrics to assess the model on
metrics =
metric_set(roc_auc, accuracy, sensitivity, specificity),
# pass the grid space
grid = 2,
control = control_resamples(save_pred = TRUE)
)
step_nzv(all_predictors()) %>%
step_zv(all_predictors())
# Random forest model---------------------------------------------------------------------------------------
# Create a recipe for the model to downsample
first_ranger_recipe <-
recipe(formula = brownlow_votes ~ ., data = model_data) %>%
# create id roles for variables not used in the model
step_rm(match_round, match_date, match_home_team,
match_away_team, player_team, player_name,
disposals, aflvotes, game_outcome) %>%
update_role(season, match_id, player_id, new_role = 'id') %>%
# down sample
step_downsample(under_ratio = 1, seed = 345) %>%
step_nzv(all_predictors()) %>%
step_zv(all_predictors())
# Random forest model---------------------------------------------------------------------------------------
# Create a recipe for the model to downsample
first_ranger_recipe <-
recipe(formula = brownlow_votes ~ ., data = model_data) %>%
# create id roles for variables not used in the model
step_rm(match_round, match_date, match_home_team,
match_away_team, player_team, player_name,
disposals, aflvotes, game_outcome) %>%
update_role(season, match_id, player_id, new_role = 'id') %>%
# down sample
step_downsample(under_ratio = 1, seed = 345) %>%
step_nzv(all_predictors()) %>%
step_zv(all_predictors())
# Random forest model---------------------------------------------------------------------------------------
# Create a recipe for the model to downsample
first_ranger_recipe <-
recipe(formula = brownlow_votes ~ ., data = model_data) %>%
# create id roles for variables not used in the model
step_rm(match_round, match_date, match_home_team,
match_away_team, player_team, player_name,
disposals, aflvotes, game_outcome) %>%
update_role(season, match_id, player_id, new_role = 'id') %>%
# down sample
step_downsample(brownlow_votes, under_ratio = 1, seed = 345) %>%
step_nzv(all_predictors()) %>%
step_zv(all_predictors())
# Random forest model---------------------------------------------------------------------------------------
# Create a recipe for the model to downsample
ranger_recipe <-
recipe(formula = brownlow_votes ~ ., data = model_data) %>%
# create id roles for variables not used in the model
step_rm(match_round, match_date, match_home_team,
match_away_team, player_team, player_name,
disposals, aflvotes, game_outcome) %>%
update_role(season, match_id, player_id, new_role = 'id') %>%
# down sample
step_downsample(brownlow_votes, under_ratio = 1, seed = 345) %>%
step_nzv(all_predictors()) %>%
step_zv(all_predictors())
# Create a model specification
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 5) %>%
set_mode("classification") %>%
set_engine("ranger")
# Create a work flow
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
ranger_recipe
# Global variables -----------------------------------------------------------------------------------------
all_cores <- parallel::detectCores(logical = FALSE)
cl <- makePSOCKcluster(all_cores)
registerDoParallel(cl)
# Random forest model---------------------------------------------------------------------------------------
# Create a recipe for the model to downsample
ranger_recipe <-
recipe(formula = brownlow_votes ~ ., data = model_data) %>%
# create id roles for variables not used in the model
step_rm(match_round, match_date, match_home_team,
match_away_team, player_team, player_name,
disposals, aflvotes, game_outcome) %>%
update_role(season, match_id, player_id, new_role = 'id') %>%
# down sample
step_downsample(brownlow_votes, under_ratio = 1, seed = 345) %>%
step_nzv(all_predictors()) %>%
step_zv(all_predictors())
# Create a model specification
ranger_spec <-
rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_mode("classification") %>%
set_engine("ranger")
# Create a work flow
ranger_workflow <-
workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(ranger_spec)
# Check the accuracy on the bootstrap samples to tune hyper parameters
set.seed(567)
ranger_tune <-
tune_grid(ranger_workflow,
# pass the bootstrap folds
resamples = bootstrap_folds,
# specify the metrics to assess the model on
metrics =
metric_set(roc_auc, accuracy, sensitivity, specificity),
# pass the grid space
grid = 25,
control = control_resamples(save_pred = TRUE)
)
# See which hyper parameters performed the best
hyper_parameter_grid <- tuning_parameters_fun()
hyper_parameter_grid
# See how the model performs on the test set using optimal hyper parameters
metrics <- out_of_sample_accuracy()
metrics
# See which variables are of most importance
var_salience <- var_importance()
var_salience
# Fit the final model to all historic data and predict on the new data
predicted_votes <- predict_function()
# Define function to get the predictions
predict_function <- function() {
# Select the best tuning parameters, optimizing the roc_auc
best <- ranger_tune %>%
select_best("roc_auc")
# Fit the final model
ranger_final_model <- workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(finalize_model(ranger_spec, best)) %>%
fit(model_data)
# Number of rows
n_rows <- 198
# Generate the predictions
results <-
predict(ranger_final_model, new_data = new_data, type = "prob") %>%
bind_cols(new_data) %>%
select(match_id, player_id, player_name, player_team, .pred_0:.pred_3) %>%
mutate(expected_votes = (.pred_0 * 0) + (.pred_1 * 1) + (.pred_2 * 2) + (.pred_3 * 3)) %>%
group_by(match_id) %>%
slice_max(order_by = expected_votes, n = 3, with_ties = FALSE) %>%
ungroup() %>%
arrange(match_id, desc(expected_votes)) %>%
mutate(predicted_votes = rep(c(3, 2, 1), n_rows))
return(results)
}
# Fit the final model to all historic data and predict on the new data
predicted_votes <- predict_function()
predicted_votes
predicted_votes %>%
group_by(player_id, player_name) %>%
summarize(total = sum(predicted_votes))
predicted_votes %>%
group_by(player_id, player_name) %>%
summarize(total = sum(predicted_votes)) %>%
arrange(desc(total))
predicted_votes %>%
group_by(player_id, player_name) %>%
summarize(total = sum(predicted_votes)) %>%
arrange(desc(total)) %>%
head(20)
predicted_votes %>%
filter(str_detect(player_name, 'Walker'))
predicted_votes %>%
filter(str_detect(player_name, 'Walker')) %>%
left_join(clean_all_data)
predicted_votes %>%
filter(str_detect(player_name, 'Walker')) %>%
left_join(clean_all_data) %>%
distinct(player_name, match_round, .pred_0:.pred_3, expected_votes, votes)
predicted_votes %>%
filter(str_detect(player_name, 'Walker')) %>%
left_join(clean_all_data) %>%
select(player_name, match_round, .pred_0:.pred_3, expected_votes, votes)
predicted_votes %>%
filter(str_detect(player_name, 'Walker')) %>%
left_join(clean_all_data) %>%
select(player_name, match_round, .pred_0:.pred_3, expected_votes, predicted_votes)
predicted_votes %>%
filter(str_detect(player_name, 'Laird')) %>%
left_join(clean_all_data) %>%
select(player_name, match_round, .pred_0:.pred_3, expected_votes, predicted_votes)
predicted_votes %>%
group_by(player_id, player_name) %>%
summarize(total = sum(predicted_votes)) %>%
arrange(desc(total)) %>%
head(20)
setwd(paste0(here::here(), "/02 Outputs"))
predicted_votes
predicted_votes %>%
inner_join(clean_all_data)
predicted_votes %>%
inner_join(clean_all_data) %>%
select(match_round, player_team, player_name)
predicted_votes %>%
inner_join(clean_all_data) %>%
select(match_round, player_team, player_name, .pred_0:.pred_3, expected_votes, predicted_votes)
predicted_votes %>%
inner_join(clean_all_data) %>%
select(match_round, player_team, player_name, .pred_0:.pred_3, expected_votes, predicted_votes) %>%
write_csv('2021_predicted_votes.csv')
# Define function to get top 20
totals_table <- function() {
suppressMessages(
append_data <- new_data %>%
group_by(player_id, player_name, player_team) %>%
summarize("Average Disposals" = mean(disposals),
"Average Supercoach" = mean(supercoach_score))
)
suppressMessages(
totals <- predicted_votes %>%
group_by(player_id, player_name, player_team) %>%
summarize(total = sum(predicted_votes)) %>%
arrange(desc(total)) %>%
left_join(append_data) %>%
ungroup() %>%
select(-player_id) %>%
rename("Player Name" = player_name,
"Team" = player_team,
"Total Predicted Votes" = total) %>%
mutate(logo = case_when(
Team == "Melbourne" ~ "https://upload.wikimedia.org/wikipedia/en/4/4e/Melbournefc.svg",
Team == "Port Adelaide" ~ "https://upload.wikimedia.org/wikipedia/en/3/36/Port_Adelaide_Football_Club_logo.svg",
Team == "Western Bulldogs" ~ "https://upload.wikimedia.org/wikipedia/en/0/09/Western_Bulldogs_logo.svg",
Team == "Essendon" ~ "https://upload.wikimedia.org/wikipedia/en/8/8b/Essendon_FC_logo.svg",
Team == "St Kilda" ~ "https://upload.wikimedia.org/wikipedia/en/5/58/St_Kilda_FC_logo.svg",
Team == "Geelong" ~ "https://upload.wikimedia.org/wikipedia/en/5/5f/Geelong_Cats_logo.svg",
Team == "Collingwood" ~ "https://upload.wikimedia.org/wikipedia/en/a/a6/Collingwood_Football_Club_Logo_%282017%E2%80%93present%29.svg",
Team == "Sydney" ~ "https://upload.wikimedia.org/wikipedia/en/a/af/Sydney_Swans_Logo_2020.svg",
Team == "Greater Western Sydney" ~ "https://upload.wikimedia.org/wikipedia/en/0/07/GWS_Giants_logo.svg",
Team == "Hawthorn" ~ "https://upload.wikimedia.org/wikipedia/en/6/62/Hawthorn-football-club-brand.svg",
Team == "Carlton" ~ "https://upload.wikimedia.org/wikipedia/en/5/58/Carlton_FC_Logo_2020.svg",
Team == "Gold Coast" ~ "https://upload.wikimedia.org/wikipedia/en/7/7d/Gold_Coast_Suns_AFL_Logo.svg",
Team == "West Coast" ~ "https://upload.wikimedia.org/wikipedia/en/b/b5/West_Coast_Eagles_logo_2017.svg",
Team == "Fremantle" ~ "https://upload.wikimedia.org/wikipedia/en/c/ca/Fremantle_FC_logo.svg",
Team == "Adelaide" ~ "https://upload.wikimedia.org/wikipedia/en/c/ca/Fremantle_FC_logo.svg",
Team == "North Melbourne" ~ "https://upload.wikimedia.org/wikipedia/en/f/fc/North_Melbourne_FC_logo.svg",
Team == "Brisbane Lions" ~ "https://upload.wikimedia.org/wikipedia/en/c/c7/Brisbane_Lions_logo_2010.svg",
TRUE ~ "https://upload.wikimedia.org/wikipedia/en/3/35/Richmond_Tigers_logo.svg")) %>%
select(`Player Name`, logo, `Team`, `Average Disposals`:`Average Supercoach`, `Total Predicted Votes`) %>%
head(15)
)
table <- totals %>%
gt() %>%
tab_spanner(
label = "Season Averages",
columns = 4:5
) %>%
tab_header(
title = md("2020 Brownlow Medal Predictions"),
subtitle = md("The top 15 players are shown - their predicted votes have been added up for for each game to give a total across the season")
) %>%
fmt_percent(columns = 4:5,
decimals = 0
) %>%
data_color(
columns = vars(`Total Predicted Votes`),
colors = scales::col_numeric(
palette = c("white", "#3fc1c9"),
domain = NULL
)
) %>%
tab_source_note(
source_note = md("**Data**: fitzroy | **Table**: @oarmstrong95")
) %>%
# tab_footnote(
#   footnote = "Note: percentile average per game.",
#   locations = cells_column_labels(columns = 4:5)
# ) %>%
gt_theme_538()
return(table)
}
check <- totals_table()
# Define function to customise aesthics of table
gt_theme_538 <- function(data,...) {
data %>%
text_transform(
locations = cells_body(vars(logo)),
fn = function(x) {
web_image(
url = x,
height = 25
)
}
) %>%
opt_all_caps()  %>%
opt_table_font(
font = list(
google_font("Chivo"),
default_fonts()
)
) %>%
tab_style(
style = cell_borders(
sides = "bottom", color = "transparent", weight = px(2)
),
locations = cells_body(
columns = TRUE,
# This is a relatively sneaky way of changing the bottom border
# Regardless of data size
rows = nrow(data$`_data`)
)
)  %>%
# Relabel columns
cols_label(
logo = ""
) %>%
tab_options(
column_labels.background.color = "white",
table.border.top.width = px(3),
table.border.top.color = "transparent",
table.border.bottom.color = "transparent",
table.border.bottom.width = px(3),
column_labels.border.top.width = px(3),
column_labels.border.top.color = "transparent",
column_labels.border.bottom.width = px(3),
column_labels.border.bottom.color = "black",
data_row.padding = px(3),
source_notes.font.size = 12,
table.font.size = 16,
heading.align = "left",
...
)
}
check <- totals_table()
# Load and install packages locally
pacman::p_load(tidyverse, here, fitzRoy, janitor, lubridate, naniar, tidymodels,
readr, themis, ranger, parallel, doParallel, tictoc, rvest, vip, gt)
check <- totals_table()
check
# Define function to get top 20
totals_table <- function() {
suppressMessages(
append_data <- new_data %>%
group_by(player_id, player_name, player_team) %>%
summarize("Average Disposals" = mean(disposals),
"Average Supercoach" = mean(supercoach_score))
)
suppressMessages(
totals <- predicted_votes %>%
group_by(player_id, player_name, player_team) %>%
summarize(total = sum(predicted_votes)) %>%
arrange(desc(total)) %>%
left_join(append_data) %>%
ungroup() %>%
select(-player_id) %>%
rename("Player Name" = player_name,
"Team" = player_team,
"Total Predicted Votes" = total) %>%
mutate(logo = case_when(
Team == "Melbourne" ~ "https://upload.wikimedia.org/wikipedia/en/4/4e/Melbournefc.svg",
Team == "Port Adelaide" ~ "https://upload.wikimedia.org/wikipedia/en/3/36/Port_Adelaide_Football_Club_logo.svg",
Team == "Western Bulldogs" ~ "https://upload.wikimedia.org/wikipedia/en/0/09/Western_Bulldogs_logo.svg",
Team == "Essendon" ~ "https://upload.wikimedia.org/wikipedia/en/8/8b/Essendon_FC_logo.svg",
Team == "St Kilda" ~ "https://upload.wikimedia.org/wikipedia/en/5/58/St_Kilda_FC_logo.svg",
Team == "Geelong" ~ "https://upload.wikimedia.org/wikipedia/en/5/5f/Geelong_Cats_logo.svg",
Team == "Collingwood" ~ "https://upload.wikimedia.org/wikipedia/en/a/a6/Collingwood_Football_Club_Logo_%282017%E2%80%93present%29.svg",
Team == "Sydney" ~ "https://upload.wikimedia.org/wikipedia/en/a/af/Sydney_Swans_Logo_2020.svg",
Team == "Greater Western Sydney" ~ "https://upload.wikimedia.org/wikipedia/en/0/07/GWS_Giants_logo.svg",
Team == "Hawthorn" ~ "https://upload.wikimedia.org/wikipedia/en/6/62/Hawthorn-football-club-brand.svg",
Team == "Carlton" ~ "https://upload.wikimedia.org/wikipedia/en/5/58/Carlton_FC_Logo_2020.svg",
Team == "Gold Coast" ~ "https://upload.wikimedia.org/wikipedia/en/7/7d/Gold_Coast_Suns_AFL_Logo.svg",
Team == "West Coast" ~ "https://upload.wikimedia.org/wikipedia/en/b/b5/West_Coast_Eagles_logo_2017.svg",
Team == "Fremantle" ~ "https://upload.wikimedia.org/wikipedia/en/c/ca/Fremantle_FC_logo.svg",
Team == "Adelaide" ~ "https://upload.wikimedia.org/wikipedia/en/c/ca/Fremantle_FC_logo.svg",
Team == "North Melbourne" ~ "https://upload.wikimedia.org/wikipedia/en/f/fc/North_Melbourne_FC_logo.svg",
Team == "Brisbane Lions" ~ "https://upload.wikimedia.org/wikipedia/en/c/c7/Brisbane_Lions_logo_2010.svg",
TRUE ~ "https://upload.wikimedia.org/wikipedia/en/3/35/Richmond_Tigers_logo.svg")) %>%
select(`Player Name`, logo, `Team`, `Average Disposals`:`Average Supercoach`, `Total Predicted Votes`) %>%
head(15)
)
table <- totals %>%
gt() %>%
tab_spanner(
label = "Season Averages",
columns = 4:5
) %>%
tab_header(
title = md("2021 Brownlow Medal Predictions"),
subtitle = md("The top 15 players are shown - their predicted votes have been added up for for each game to give a total across the season")
) %>%
fmt_percent(columns = 4:5,
decimals = 0
) %>%
data_color(
columns = vars(`Total Predicted Votes`),
colors = scales::col_numeric(
palette = c("white", "#3fc1c9"),
domain = NULL
)
) %>%
tab_source_note(
source_note = md("**Data**: fitzroy | **Table**: @oarmstrong95")
) %>%
# tab_footnote(
#   footnote = "Note: percentile average per game.",
#   locations = cells_column_labels(columns = 4:5)
# ) %>%
gt_theme_538()
return(table)
}
check <- totals_table()
check
metrics
ranger_final_model
metrics
save.image("~/brownlow_medal_2021/20210913_workspace.RData")
predicted_votes %>%
inner_join(clean_all_data)
setwd(paste0(here::here(), "/02 Outputs"))
predicted_votes %>%
inner_join(clean_all_data) %>%
select(match_round, match_home_team, match_away_team, player_team, player_name, .pred_0:.pred_3, expected_votes, predicted_votes) %>%
write_csv('2021_predicted_votes.csv')
