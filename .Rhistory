add_recipe(xgboost_recipe) %>%
add_model(finalize_model(xgboost_spec, best_xgboost)) %>%
fit(model_data)
# Generate the predictions
xgboost_results <-
predict(xgboost_final_model, new_data = new_data, type = "prob") %>%
bind_cols(new_data)
xgboost_results
xgboost_results %>%
rename_with( ~ paste0("a", .x))
new_data
# Generate the predictions
xgboost_results <-
predict(xgboost_final_model, new_data = new_data, type = "prob")
xgboost_results %>%
rename_with( ~ paste0("a", .x))
xgboost_results %>%
rename_with( ~ paste0("xgboost_", .x))
# Generate the predictions
ranger_results <-
predict(ranger_final_model, new_data = new_data, type = "prob") %>%
rename_with( ~ paste0("ranger_", .x))
# Generate the predictions
xgboost_results <-
predict(xgboost_final_model, new_data = new_data, type = "prob") %>%
rename_with( ~ paste0("xgboost_", .x))
### Combine predictions
ranger_results %>%
bind_cols(xgboost_results)
0.993 + 0.00566 + 0.00025 + 0.00156
0.619 + 0.131 + 0.126 + 0.124
### Combine predictions
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0 / 2))
### Combine predictions
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0 / 2),
pred_1 = (ranger_.pred_1 + xgboost_.pred_1 / 2),
pred_2 = (ranger_.pred_2 + xgboost_.pred_2 / 2),
pred_3 = (ranger_.pred_3 + xgboost_.pred_3 / 2))
### Combine predictions
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0 / 2),
pred_1 = (ranger_.pred_1 + xgboost_.pred_1 / 2),
pred_2 = (ranger_.pred_2 + xgboost_.pred_2 / 2),
pred_3 = (ranger_.pred_3 + xgboost_.pred_3 / 2)) %>%
select(pred_0:pred_3)
### Combine predictions
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0 / 2),
pred_1 = (ranger_.pred_1 + xgboost_.pred_1 / 2),
pred_2 = (ranger_.pred_2 + xgboost_.pred_2 / 2),
pred_3 = (ranger_.pred_3 + xgboost_.pred_3 / 2)) %>%
select(pred_0:pred_3) %>%
mutate(total = sum(pred_1 + pred_2 + pred_3 + pred_0))
### Combine predictions
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0 / 2),
pred_1 = (ranger_.pred_1 + xgboost_.pred_1 / 2),
pred_2 = (ranger_.pred_2 + xgboost_.pred_2 / 2),
pred_3 = (ranger_.pred_3 + xgboost_.pred_3 / 2)) %>%
select(pred_0:pred_3) %>%
mutate(total = pred_1 + pred_2 + pred_3 + pred_0)
### Combine predictions
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0 / 2),
pred_1 = (ranger_.pred_1 + xgboost_.pred_1 / 2),
pred_2 = (ranger_.pred_2 + xgboost_.pred_2 / 2),
pred_3 = (ranger_.pred_3 + xgboost_.pred_3 / 2)) %>%
select(pred_0:pred_3) %>%
mutate(total = pred_1 + pred_2 + pred_3 + pred_0,
delta = total - 1)
### Combine predictions
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0 / 2),
pred_1 = (ranger_.pred_1 + xgboost_.pred_1 / 2),
pred_2 = (ranger_.pred_2 + xgboost_.pred_2 / 2),
pred_3 = (ranger_.pred_3 + xgboost_.pred_3 / 2)) %>%
select(pred_0:pred_3) %>%
mutate(total = pred_1 + pred_2 + pred_3 + pred_0,
delta = 1- delta)
### Combine predictions
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0 / 2),
pred_1 = (ranger_.pred_1 + xgboost_.pred_1 / 2),
pred_2 = (ranger_.pred_2 + xgboost_.pred_2 / 2),
pred_3 = (ranger_.pred_3 + xgboost_.pred_3 / 2)) %>%
select(pred_0:pred_3) %>%
mutate(total = pred_1 + pred_2 + pred_3 + pred_0,
delta = 1 - delta)
### Combine predictions
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0 / 2),
pred_1 = (ranger_.pred_1 + xgboost_.pred_1 / 2),
pred_2 = (ranger_.pred_2 + xgboost_.pred_2 / 2),
pred_3 = (ranger_.pred_3 + xgboost_.pred_3 / 2)) %>%
select(pred_0:pred_3) %>%
mutate(total = pred_1 + pred_2 + pred_3 + pred_0,
delta = 1 - total)
### Combine predictions
check <- ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0 / 2),
pred_1 = (ranger_.pred_1 + xgboost_.pred_1 / 2),
pred_2 = (ranger_.pred_2 + xgboost_.pred_2 / 2),
pred_3 = (ranger_.pred_3 + xgboost_.pred_3 / 2)) %>%
select(pred_0:pred_3) %>%
mutate(total = pred_1 + pred_2 + pred_3 + pred_0,
delta = 1 - total)
View(check)
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2),
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2),
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2),
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2)) %>%
select(pred_0:pred_3)
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2),
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2),
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2),
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2)) %>%
select(pred_0:pred_3)
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2,
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2,
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2,
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2)
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2,
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2,
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2,
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2) %>%
select(pred_0:pred_3)
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2,
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2,
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2,
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2) %>%
select(pred_0:pred_3) %>%
mutate(total = pred_1 + pred_2 + pred_3 + pred_0)
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2,
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2,
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2,
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2) %>%
select(pred_0:pred_3) %>%
mutate(total = pred_1 + pred_2 + pred_3 + pred_0)
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2,
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2,
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2,
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2) %>%
select(pred_0:pred_3) %>%
mutate(total = pred_1 + pred_2 + pred_3 + pred_0)
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2,
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2,
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2,
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2) %>%
select(pred_0:pred_3) %>%
mutate(total = pred_1 + pred_2 + pred_3 + pred_0)
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2,
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2,
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2,
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2) %>%
select(pred_0:pred_3) %>%
mutate(total = pred_1 + pred_2 + pred_3 + pred_0)
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2,
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2,
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2,
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2) %>%
select(pred_0:pred_3) %>%
mutate(total = pred_1 + pred_2 + pred_3 + pred_0)
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2,
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2,
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2,
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2) %>%
select(pred_0:pred_3) %>%
mutate(total = pred_1 + pred_2 + pred_3 + pred_0)
### Combine predictions
check <- ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2,
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2,
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2,
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2) %>%
select(pred_0:pred_3)
### Combine predictions
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2,
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2,
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2,
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2) %>%
select(pred_0:pred_3)
### Combine predictions
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2,
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2,
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2,
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2) %>%
select(pred_0:pred_3) %>%
bind_cols(new_data) %>%
select(match_id, player_id, player_name, player_team, .pred_0:.pred_3) %>%
mutate(expected_votes = (.pred_0 * 0) + (.pred_1 * 1) + (.pred_2 * 2) + (.pred_3 * 3)) %>%
group_by(match_id) %>%
slice_max(order_by = expected_votes, n = 3, with_ties = FALSE) %>%
ungroup() %>%
arrange(match_id, desc(expected_votes)) %>%
mutate(predicted_votes = rep(c(3, 2, 1), n_rows))
### Combine predictions
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2,
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2,
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2,
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2) %>%
select(pred_0:pred_3) %>%
bind_cols(new_data) %>%
select(match_id, player_id, player_name, player_team, .pred_0:.pred_3) %>%
mutate(expected_votes = (pred_0 * 0) + (pred_1 * 1) + (pred_2 * 2) + (pred_3 * 3)) %>%
group_by(match_id) %>%
slice_max(order_by = expected_votes, n = 3, with_ties = FALSE) %>%
ungroup() %>%
arrange(match_id, desc(expected_votes)) %>%
mutate(predicted_votes = rep(c(3, 2, 1), n_rows))
### Combine predictions
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2,
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2,
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2,
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2) %>%
select(pred_0:pred_3) %>%
bind_cols(new_data) %>%
select(match_id, player_id, player_name, player_team, pred_0:pred_3) %>%
mutate(expected_votes = (pred_0 * 0) + (pred_1 * 1) + (pred_2 * 2) + (pred_3 * 3)) %>%
group_by(match_id) %>%
slice_max(order_by = expected_votes, n = 3, with_ties = FALSE) %>%
ungroup() %>%
arrange(match_id, desc(expected_votes)) %>%
mutate(predicted_votes = rep(c(3, 2, 1), n_rows))
### Combine predictions
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2,
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2,
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2,
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2) %>%
select(pred_0:pred_3) %>%
bind_cols(new_data) %>%
select(match_id, player_id, player_name, player_team, pred_0:pred_3) %>%
mutate(expected_votes = (pred_0 * 0) + (pred_1 * 1) + (pred_2 * 2) + (pred_3 * 3)) %>%
group_by(match_id) %>%
slice_max(order_by = expected_votes, n = 3, with_ties = FALSE) %>%
ungroup() %>%
arrange(match_id, desc(expected_votes)) %>%
mutate(predicted_votes = rep(c(3, 2, 1), n_rows)) %>%
group_by(player_id, player_team) %>%
summarize(total = sum(predicted_votes)) %>%
arrange(desc(total))
### Combine predictions
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2,
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2,
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2,
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2) %>%
select(pred_0:pred_3) %>%
bind_cols(new_data) %>%
select(match_id, player_id, player_name, player_team, pred_0:pred_3) %>%
mutate(expected_votes = (pred_0 * 0) + (pred_1 * 1) + (pred_2 * 2) + (pred_3 * 3)) %>%
group_by(match_id) %>%
slice_max(order_by = expected_votes, n = 3, with_ties = FALSE) %>%
ungroup() %>%
arrange(match_id, desc(expected_votes)) %>%
mutate(predicted_votes = rep(c(3, 2, 1), n_rows)) %>%
group_by(player_id, player_name) %>%
summarize(total = sum(predicted_votes)) %>%
arrange(desc(total))
### Combine predictions
ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2,
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2,
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2,
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2) %>%
select(pred_0:pred_3) %>%
bind_cols(new_data) %>%
select(match_id, player_id, player_name, player_team, pred_0:pred_3) %>%
mutate(expected_votes = (pred_0 * 0) + (pred_1 * 1) + (pred_2 * 2) + (pred_3 * 3)) %>%
group_by(match_id) %>%
slice_max(order_by = expected_votes, n = 3, with_ties = FALSE) %>%
ungroup() %>%
arrange(match_id, desc(expected_votes)) %>%
mutate(predicted_votes = rep(c(3, 2, 1), n_rows)) %>%
group_by(player_id, player_name) %>%
summarize(total = sum(predicted_votes)) %>%
arrange(desc(total)) %>%
head(20)
# Define function to get the predictions
predict_function <- function() {
### Random forest model
# Select the best tuning parameters, optimizing the roc_auc
ranger_best <- ranger_tune %>%
select_best("roc_auc")
# Fit the final model
ranger_final_model <- workflow() %>%
add_recipe(ranger_recipe) %>%
add_model(finalize_model(ranger_spec, ranger_best)) %>%
fit(model_data)
# Generate the predictions
ranger_results <-
predict(ranger_final_model, new_data = new_data, type = "prob") %>%
rename_with( ~ paste0("ranger_", .x))
### XGBoost model
# Select the best tuning parameters, optimizing the roc_auc
best_xgboost <- xgboost_tune %>%
select_best("roc_auc")
# Fit the final model
xgboost_final_model <- workflow() %>%
add_recipe(xgboost_recipe) %>%
add_model(finalize_model(xgboost_spec, best_xgboost)) %>%
fit(model_data)
# Generate the predictions
xgboost_results <-
predict(xgboost_final_model, new_data = new_data, type = "prob") %>%
rename_with( ~ paste0("xgboost_", .x))
# Number of rows
n_rows <- 198
### Combine predictions
results <- ranger_results %>%
bind_cols(xgboost_results) %>%
mutate(pred_0 = (ranger_.pred_0 + xgboost_.pred_0) / 2,
pred_1 = (ranger_.pred_1 + xgboost_.pred_1) / 2,
pred_2 = (ranger_.pred_2 + xgboost_.pred_2) / 2,
pred_3 = (ranger_.pred_3 + xgboost_.pred_3) / 2) %>%
select(pred_0:pred_3) %>%
bind_cols(new_data) %>%
select(match_id, player_id, player_name, player_team, pred_0:pred_3) %>%
mutate(expected_votes = (pred_0 * 0) + (pred_1 * 1) + (pred_2 * 2) + (pred_3 * 3)) %>%
group_by(match_id) %>%
slice_max(order_by = expected_votes, n = 3, with_ties = FALSE) %>%
ungroup() %>%
arrange(match_id, desc(expected_votes)) %>%
mutate(predicted_votes = rep(c(3, 2, 1), n_rows))
return(results)
}
# Fit the final model to all historic data and predict on the new data
predicted_votes <- predict_function()
predicted_votes
totals_table()
ranger_tune
setwd(paste0(here::here(), "/02 Outputs"))
predicted_votes %>%
inner_join(clean_all_data) %>%
select(match_round, match_home_team, match_away_team, player_team, player_name, .pred_0:.pred_3, expected_votes, predicted_votes) %>%
write_csv('2021_predicted_votes.csv')
setwd(paste0(here::here(), "/02 Outputs"))
predicted_votes %>%
inner_join(clean_all_data) %>%
select(match_round, match_home_team, match_away_team, player_team, player_name, pred_0:pred_3, expected_votes, predicted_votes) %>%
write_csv('2021_predicted_votes.csv')
totals_table()
var_salience
totals_table()
# XGBoost model ------------------------------------------------------------------------------------------
# Create a recipe for the model
xgboost_recipe <-
recipe(formula = brownlow_votes ~ ., data = model_data) %>%
# create id roles for variables not used in the model
step_rm(match_round, match_date, match_home_team,
match_away_team, player_team, player_name,
disposals) %>%
update_role(season, match_id, player_id, new_role = 'id') %>%
# down sample
step_downsample(brownlow_votes, under_ratio = 0.5, seed = 345) %>%
step_nzv(all_predictors()) %>%
step_zv(all_predictors()) %>%
step_dummy(aflvotes, game_outcome) # xgboost cannot take factor variables
xgboost_recipe
prep(xgboost_recipe)
prep(xgboost_recipe) %>% juice()
prep(xgboost_recipe) %>% juice() %>% count(brownlow_votes)
# XGBoost model ------------------------------------------------------------------------------------------
# Create a recipe for the model
xgboost_recipe <-
recipe(formula = brownlow_votes ~ ., data = model_data) %>%
# create id roles for variables not used in the model
step_rm(match_round, match_date, match_home_team,
match_away_team, player_team, player_name,
disposals) %>%
update_role(season, match_id, player_id, new_role = 'id') %>%
# down sample
#step_downsample(brownlow_votes, under_ratio = 1, seed = 345) %>%
step_nzv(all_predictors()) %>%
step_zv(all_predictors()) %>%
step_dummy(aflvotes, game_outcome) # xgboost cannot take factor variables
prep(xgboost_recipe) %>% juice() %>% count(brownlow_votes)
# XGBoost model ------------------------------------------------------------------------------------------
# Create a recipe for the model
xgboost_recipe <-
recipe(formula = brownlow_votes ~ ., data = model_data) %>%
# create id roles for variables not used in the model
step_rm(match_round, match_date, match_home_team,
match_away_team, player_team, player_name,
disposals) %>%
update_role(season, match_id, player_id, new_role = 'id') %>%
# down sample
step_downsample(brownlow_votes, under_ratio = 1.5, seed = 345) %>%
step_nzv(all_predictors()) %>%
step_zv(all_predictors()) %>%
step_dummy(aflvotes, game_outcome) # xgboost cannot take factor variables
prep(xgboost_recipe) %>% juice() %>% count(brownlow_votes)
# XGBoost model ------------------------------------------------------------------------------------------
# Create a recipe for the model
xgboost_recipe <-
recipe(formula = brownlow_votes ~ ., data = model_data) %>%
# create id roles for variables not used in the model
step_rm(match_round, match_date, match_home_team,
match_away_team, player_team, player_name,
disposals) %>%
update_role(season, match_id, player_id, new_role = 'id') %>%
# down sample
step_downsample(brownlow_votes, under_ratio = 1, seed = 345) %>%
step_nzv(all_predictors()) %>%
step_zv(all_predictors()) %>%
step_dummy(aflvotes, game_outcome) # xgboost cannot take factor variables
prep(xgboost_recipe) %>% juice() %>% count(brownlow_votes)
# XGBoost model ------------------------------------------------------------------------------------------
# Create a recipe for the model
xgboost_recipe <-
recipe(formula = brownlow_votes ~ ., data = model_data) %>%
# create id roles for variables not used in the model
step_rm(match_round, match_date, match_home_team,
match_away_team, player_team, player_name,
disposals) %>%
update_role(season, match_id, player_id, new_role = 'id') %>%
# down sample
step_downsample(brownlow_votes, under_ratio = 2, seed = 345) %>%
step_nzv(all_predictors()) %>%
step_zv(all_predictors()) %>%
step_dummy(aflvotes, game_outcome) # xgboost cannot take factor variables
prep(xgboost_recipe) %>% juice() %>% count(brownlow_votes)
metrics
# XGBoost model ------------------------------------------------------------------------------------------
# Create a recipe for the model
xgboost_recipe <-
recipe(formula = brownlow_votes ~ ., data = model_data) %>%
# create id roles for variables not used in the model
step_rm(match_round, match_date, match_home_team,
match_away_team, player_team, player_name,
disposals) %>%
update_role(season, match_id, player_id, new_role = 'id') %>%
# down sample
step_downsample(brownlow_votes, under_ratio = 2, seed = 345) %>%
step_nzv(all_predictors()) %>%
step_zv(all_predictors()) %>%
step_dummy(aflvotes, game_outcome) # xgboost cannot take factor variables
# Create a model specification
xgboost_spec <-
boost_tree(mtry = tune(), min_n = tune(), learn_rate = tune(), trees = 1000) %>%
set_engine("xgboost") %>%
set_mode("classification")
# Create a work flow
xgboost_workflow <-
workflow() %>%
add_recipe(xgboost_recipe) %>%
add_model(xgboost_spec)
# Check the accuracy on the bootstrap samples to tune hyper parameters
set.seed(678)
xgboost_tune <-
tune_grid(xgboost_workflow,
# pass the bootstrap folds
resamples = bootstrap_folds,
# specify the metrics to assess the model on
metrics =
metric_set(roc_auc, accuracy, sensitivity, specificity),
# pass the grid space
grid = 25,
control = control_resamples(save_pred = TRUE)
)
# See how the model performs on the test set using optimal hyper parameters
metrics <- out_of_sample_accuracy(model = 'xgboost')
metrics
# See which variables are of most importance
var_salience <- var_importance(model = 'xgboost')
var_salience
