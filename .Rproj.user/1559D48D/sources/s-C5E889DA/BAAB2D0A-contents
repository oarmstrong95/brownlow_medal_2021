tic()

#------------------------------------------------------------------------------
# Global variables
#------------------------------------------------------------------------------

#nn_file <- "nn_result_WITHdownsample_WITHCV_OA_09102020.csv"

#------------------------------------------------------------------------------
# Subset Data
#------------------------------------------------------------------------------
# split into data for model and new data for predictions
data <- final_data_all %>% filter(season < MAX_YEAR)
new_data <- final_data_all %>% filter(season == MAX_YEAR) %>%
  select(-brownlow_votes)

#------------------------------------------------------------------------------
# Split Into Training and Test Sets
#------------------------------------------------------------------------------
# initial split
set.seed(987)
split <- rsample::initial_split(data, strata = brownlow_votes)

# training and test sets
training <- training(split)
test <- testing(split)

# split training data into samples
set.seed(123)
samples <- vfold_cv(training, v = 10, strata = brownlow_votes)

#------------------------------------------------------------------------------
# Data Pre Processing
#------------------------------------------------------------------------------
# Final pre processing steps to the data for TRAINING
training_model_recipe <- recipe(brownlow_votes ~ ., data = data) %>%
  # keep indicator variables but don't add to model
  update_role(match_id, new_role = 'id') %>% 
  update_role(match_date, new_role = 'id') %>%
  update_role(match_round, new_role = 'id') %>%
  update_role(season, new_role = 'id') %>%
  update_role(match_home_team, new_role = 'id') %>%
  update_role(match_away_team, new_role = 'id') %>%
  update_role(player_id, new_role = 'id') %>%
  update_role(player, new_role = 'id') %>%
  update_role(player_team, new_role = 'id') %>%
  step_dummy(player_position, win_lose, past_top10) %>%
  themis::step_downsample(brownlow_votes, 
                          seed = sample.int(10^6, 1))

# Apply pre processing to TRAINING set
pre_processed_training_data <- training_model_recipe %>%
  prep() %>%
  juice()

#------------------------------------------------------------------------------
# Neural Network
#------------------------------------------------------------------------------
doParallel::registerDoParallel()

# Create nn specification
nn_spec <- mlp(mode = "classification",
               hidden_units = tune(), 
               penalty = tune()) %>%
  set_engine("nnet")

# create work flow for tuning the nn
nn_tune_wf <- workflow() %>%
  add_recipe(training_model_recipe) %>%
  add_model(nn_spec)

#  Create a tuning grid for the parameters
set.seed(234)
grid_options <- grid_regular(
  hidden_units(),
  penalty()
)

# Create tuning parameters
nn_tuned_results <- tune_grid(
  nn_tune_wf,
  resamples = samples,
  grid = grid_options,
  control = control_resamples(save_pred = TRUE)
)

# Select best parameters
best_auc <- select_best(nn_tuned_results, "roc_auc")

# Finalise model specification for optimal parameters
tuned_nn_model <- finalize_model(
  nn_spec,
  best_auc
)

# Create final results
final_nn_wf <- workflow() %>%
  add_recipe(training_model_recipe) %>%
  add_model(tuned_nn_model)

# Evaluate model pennormance on the test set
metrics_nn <- final_nn_wf %>%
  last_fit(split) %>%
  collect_metrics()

set.seed(567)
# Fit the final model on the entire data set
final_nn_model <- final_nn_wf %>%
  fit(data)

# Create final predictions
nn_predictions <- predict(final_nn_model, new_data, type = 'prob') %>%
  bind_cols(new_data)

top3_each_game_nn <- nn_predictions %>%
  mutate(ev = (.pred_0 * 0) + (.pred_1 * 1) + (.pred_2 * 2) + (.pred_3 * 3)) %>%
  group_by(match_id) %>%
  mutate(total = sum(ev),
         nn_ev_votes = (ev/total)*6) %>%
  #slice_max(order_by = nn_ev_votes, n = 3) %>%
  select(nn_ev_votes, match_id, match_round, match_home_team, match_away_team,
         player, player_team) %>%
  ungroup()